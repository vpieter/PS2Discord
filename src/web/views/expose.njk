{% extends "layouts/main.njk" %}

{% block styles %}
{{ super() }}
<style>
  body {
    background: rgb(var(--rgb-blue-dark));
    color: rgb(var(--rgb-white));
  }

  pre {
    --color-link: rgb(var(--rgb-green));
    --color-link-hover: rgb(var(--rgb-green-dark));
    --color-key: rgb(var(--rgb-red));
    --color-null: rgb(var(--rgb-cyan));
    --color-string: rgb(var(--rgb-yellow));
    --color-number: rgb(var(--rgb-cyan));
    --color-boolean: rgb(var(--rgb-cyan));

    font-family: Menlo, Consolas, DejaVu Sans Mono, monospace;
    font-size: 12px;
    line-height: 16px;
    word-wrap: break-word;
    white-space: pre-wrap;
    unicode-bidi: embed;
  }
  pre .key { color: var(--color-key); }
  pre .null { color: var(--color-null); }
  pre .string { color: var(--color-string); }
  pre .number { color: var(--color-number); }
  pre .boolean { color: var(--color-boolean); }
  pre .a, pre .a:active, pre .a:visited { color: var(--color-link); }
  pre .a:hover { color: var(--color-link-hover); }
  pre .json-select { -moz-user-select: all; -webkit-user-select: all; user-select: all; }
</style>
{% endblock styles %}

{% block scriptsHead %}
{{ super() }}
<script>
  const json = `{{ json | safe }}`;

  const escapeHTML = (unsafe) => {
    const regexHTML = /[&<"']/g;
    return unsafe.replace(regexHTML, (match) => {
      switch (match) {
        case '&': { return '&amp;'; }
        case '<': { return '&lt;'; }
        case '"': { return '&quot;'; }
        case `'`: { return '&apos;';Â }
        default: { return match; }
      }
    });
  };

  const highlight = (jsonString) => {
    const regexTypes = /("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g;

    return jsonString.replace(regexTypes, (match) => {
      let type = 'number';
      if (/^"/.test(match)) {
        if (/:$/.test(match)) {
          type = 'key';
          const matchWithoutQuotes = match.slice(1, -2);
          match = `"<span class="json-select">${ matchWithoutQuotes }</span>":`;
        } else {
          type = 'string';
          const matchWithoutQuotes = match.slice(1, -1);
          match = escapeHTML(matchWithoutQuotes);
          const regexURLs = /(https?:\/\/|ftp:\/\/|file:\/\/|www\.)[^\s,;:]+[^\s".,;:]/g;
          match = match.replace(regexURLs, (url) => `<a href="${ url }" class="a">${ url }</a>`);
          match = `"<span class="json-select">${ match }</span>"`;
        }
      } else if (/true|false/.test(match)) {
        type = 'boolean';
        match = `<span class="json-select">${ match }</span>`;
      } else if (/null/.test(match)) {
        type = 'null';
        match = `<span class="json-select">${ match }</span>`;
      }
      return `<span class="${ type }">${ match }</span>`;
    });
  }
</script>
{% endblock scriptsHead %}

{% block body %}
{{ super() }}
  <pre id="json"></pre>
{% endblock body %}

{% block scripts %}
{{ super() }}
<script>document.getElementById('json').innerHTML = highlight(json);</script>
{% endblock scripts %}
